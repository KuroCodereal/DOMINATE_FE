import { z } from 'zod'

const baseSchema = z.object({
  email: z.string().min(1, { message: 'Email l√† b·∫Øt bu·ªôc' }).email({ message: 'Email kh√¥ng h·ª£p l·ªá' }),

  userName: z.string({ message: 'T√™n t√†i kho·∫£n l√† b·∫Øt bu·ªôc' }).min(1, { message: 'T√™n t√†i kho·∫£n l√† b·∫Øt bu·ªôc' }),

  firstName: z.string({ message: 'H·ªç c·ªßa b·∫°n l√† b·∫Øt bu·ªôc' }).min(1, { message: 'H·ªç c·ªßa b·∫°n l√† b·∫Øt bu·ªôc' }),

  lastName: z.string({ message: 'T√™n c·ªßa b·∫°n l√† b·∫Øt bu·ªôc' }).min(1, { message: 'T√™n c·ªßa b·∫°n l√† b·∫Øt bu·ªôc' }),

  phoneNumber: z
    .string()
    .min(10, { message: 'S·ªë ƒëi·ªán tho·∫°i ph·∫£i ƒë·ªß 10‚Äì12 ch·ªØ s·ªë' })
    .max(12, { message: 'S·ªë ƒëi·ªán tho·∫°i ph·∫£i ƒë·ªß 10‚Äì12 ch·ªØ s·ªë' })
    .regex(/^[0-9]+$/, { message: 'S·ªë ƒëi·ªán tho·∫°i ch·ªâ ch·ª©a ch·ªØ s·ªë' }),

  oldPassword: z.string({ message: 'M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc' }).min(1, { message: 'M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc' }),

  password: z.string({ message: 'M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc' }).min(1, { message: 'M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc' }),

  rePassword: z.string({ message: 'M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc' }).min(1, { message: 'M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc' }),

  newPassword: z.string({ message: 'M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc' }).min(1, { message: 'M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc' }),
})

// üëâ Form t·ªïng h·ª£p, d√πng cho trang thay ƒë·ªïi m·∫≠t kh·∫©u
export const FormSchema = baseSchema
  .refine(data => data.newPassword === data.rePassword, {
    path: ['rePassword'],
    message: 'M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng kh·ªõp',
  })
  .refine(data => data.password === data.rePassword, {
    path: ['rePassword'],
    message: 'M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng kh·ªõp',
  })

// üëâ ƒêƒÉng nh·∫≠p
export const LoginSchema = baseSchema.pick({
  userName: true,
  password: true,
})

// üëâ ƒêƒÉng k√Ω
export const RegisterSchema = baseSchema.pick({
  userName: true,
  firstName: true,
  lastName: true,
  password: true,
  email: true,
  phoneNumber: true,
})

// üëâ Qu√™n m·∫≠t kh·∫©u
export const ForgetSchema = baseSchema.pick({
  email: true,
})

// üëâ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
export const ResetSchema = baseSchema
  .pick({
    password: true,
    rePassword: true,
  })
  .refine(data => data.password === data.rePassword, {
    path: ['rePassword'],
    message: 'M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng kh·ªõp',
  })

// üëâ ƒê·ªïi m·∫≠t kh·∫©u
export const ChangeSchema = baseSchema
  .pick({
    oldPassword: true,
    newPassword: true,
    rePassword: true,
  })
  .refine(data => data.newPassword === data.rePassword, {
    path: ['rePassword'],
    message: 'M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng kh·ªõp',
  })

// üëâ ƒê·∫∑t h√†ng: y√™u c·∫ßu m√¥ t·∫£
export const OrderSchema = z.object({
  description: z.string().min(1, 'Description is required').max(25, 'Description must be at most 25 characters'),
})

export type LoginFormValues = z.infer<typeof LoginSchema>
export type RegisterFormValues = z.infer<typeof RegisterSchema>
export type ForgetFormValues = z.infer<typeof ForgetSchema>
export type ResetFormValues = z.infer<typeof ResetSchema>
export type ChangeFormValues = z.infer<typeof ChangeSchema>
export type OrderFormValues = z.infer<typeof OrderSchema>
